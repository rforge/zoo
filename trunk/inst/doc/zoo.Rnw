\documentclass{Z}
%% need no \usepackage{Sweave}

\author{Achim Zeileis\\Wirtschaftsuniversit\"at Wien \And
        Gabor Grothendieck}
\Plainauthor{Achim Zeileis, Gabor Grothendieck}

\title{\pkg{zoo}: An \proglang{S3} Class Providing Infrastructure for
  Totally Ordered Observations}
\Plaintitle{zoo: An S3 Class Providing Infrastructure for
  Totally Ordered Observations}
\Shorttitle{\pkg{zoo}: \proglang{S3} Infrastructure for Totally Ordered Observations}

\Keywords{totally ordered observations, irregular time series,
  \proglang{S3}, \proglang{R}}
\Plainkeywords{totally ordered observations, irregular time series,
  S3, R}

\Abstract{
  \code{zoo} provides infrastructure for ordered observations
  which are stored internally in a vector or matrix with an
  index attribute (with in principle arbitrary class, see below)
  which has to be of the same length as \code{NROW(x)}.
}

\begin{document}

\SweaveOpts{engine=R,eps=FALSE}
<<preliminaries,echo=FALSE,results=hide>>=
library(zoo)
library(tseries)
library(strucchange)
@


\section{Introduction}

\pkg{zoo} \underline{Z}'s \underline{o}rdered \underline{o}bservations

\code{zoo} provides infrastructure for ordered observations
which are stored internally in a vector or matrix with an
index attribute (with in principle arbitrary class, see below)
which has to be of the same length as \code{NROW(x)}.

\code{zoo} is particularly aimed at irregular time series of numeric
vectors/matrices. \code{zoo}'s key design goals are independence of a particular
index/date/time class and consistency (to the extent possible)
with ts and base R by providing methods to standard generics. Therefore,
standard functions can be used to work with \code{"zoo"} objects and no
new set of commands has to be employed.

When creating a \code{"zoo"} object with the function \code{zoo},
the vector of indexes \code{order.by} can be of (a single) arbitrary class
(if \code{x} is shorter or longer than \code{order.by} it is
expanded accordingly),
but it is essential that \code{order(order.by)} works. For other
functions it is assumed that \code{c()}, \code{length()},
\code{match()} and subsetting \code{[,} work. If this is not the case
for a particular index/date/time class, then methods for these 
generic functions should be created. Note, that to achieve this
the non-generic base functions \code{order} and \code{match}
are made generics in \code{zoo} with the base functions being the
default (see \code{order} and \code{match}).

Methods to standard generics for \code{"zoo"} objects currently
include: \code{print} (see above), \code{summary}, \code{str}, \code{head},
\code{tail}, \code{[} (subsetting), \code{rbind}, \code{cbind}, \code{merge}
(see \code{merge.zoo}), \code{aggregate} (see \code{aggregate.zoo}),
\code{plot} and \code{lines} (see \code{plot.zoo}).

Additionally, \code{zoo} provides several generic functions and methods
to work (a) on the value or data contained in a \code{"zoo"} object, (b) the
index (or time) attribute associated to it, and (c) on both data and
index:

(a) The data contained in \code{"zoo"} objects can be extracted by
\code{value} (strips off all \code{"zoo"}-specific attributes) and modified
using \code{value<-}. Both are new generic functions with methods for
\code{"zoo"} objects, see \code{value}.

(b) The index associated with a \code{"zoo"} object can be extracted
by \code{index} and modified by \code{index<-}. As the interpretation
of the index as ``time'' in time series applications is more natural,
there are also synonymous methods \code{time} and \code{time<-}. The
start and the end of the index/time vector can be queried by
\code{start} and \code{end}. See \code{index}.

(c) To work on both data and index/time, \code{zoo} provides methods
\code{lag}, \code{diff} (see \code{lag.zoo}) and \code{window}, 
\code{window<-} (see \code{window.zoo}).

In addition to standard group generic function (see \code{Ops}),
the following mathematical operations are availabe as methods for
\code{"zoo"} objects: transpose \code{t} which coerces to a matrix 
first, and \code{cumsum}, \code{cumprod}, \code{cummin}, \code{cummax}
which are applied column wise.

Coercion to and from \code{"zoo"} objects is available for objects of
various classes, in particular \code{"ts"}, \code{"irts"} and \code{"its"}
objects can be coerced to \code{"zoo"}, the reverse is available for
\code{"its"} and for \code{"irts"} (the latter in package \code{tseries}).
Furthermore, \code{"zoo"} objects can be coerced to vectors, matrices and
data frames (dropping the index/time attribute). See \code{as.zoo}.

Two methods are available for \code{NA} handling in the data of 
\code{"zoo"} objects: \code{na.omit} which returns a \code{"zoo"}
object with incomplete observations removed and \code{na.contiguous}
which extracts the longest consecutive stretch of non-missing values
in a \code{"zoo"} object. Note, that the letter function is made a
generic in \code{zoo} with the base function being the default.


<<>>=
library(zoo)

## simple creation and plotting
x.date <- as.POSIXct(paste("2003-02-", c(1, 3, 7, 9, 14), sep = ""))
x <- zoo(rnorm(5), x.date)
plot(x)
time(x)

## subsetting
x[1:3]

## different classes of indexes/times can be used, e.g. Date
x.Date <- as.Date(paste("2003-02-", c(1, 3, 7, 9, 14), sep = ""))
x <- zoo(rnorm(5), x.Date)
plot(x)
## or POSIXct
y.POSIXct <- ISOdatetime(2003, 02, c(1, 3, 7, 9, 14), 0, 0, 0)
y <- zoo(rnorm(5), y.POSIXct)
plot(y)
## or numeric
z <- zoo(rnorm(5), runif(5))
plot(z)


# create a constant series
z <- zoo(1, seq(4)[-2])

# create a series with zero columns
z0 <- zoo(, 1:4)[,-1]
@

\begin{figure}
\begin{center}
<<tseries,fig=TRUE,height=8,width=6>>=
lu <- get.hist.quote(instrument = "LU",  start = "2001-01-01", origin = "1970-01-01")

LU <- zoo(value(lu), structure(time(lu)*86400, class = c("POSIXt", "POSIXct")))
LU  <- na.omit(LU)

LU2 <- zoo(value(lu), structure(time(lu), class = "Date"))
LU2 <- na.omit(LU2)

plot(diff(log(LU)), col = list(High = 4, 2))
@
\end{center}
\end{figure}

\end{document}
